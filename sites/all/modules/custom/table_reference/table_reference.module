<?php
/**
* @file
* This module provides a node type called job post
*/
/**
* Implements hook_node_info() to provide our table_reference type.
*/
function table_reference_node_info() {
	return array(
		'table_reference_member' => array(
			'name' => t('Table Member'),
			'base' => 'table_reference_member',
			'description' => t('Use this content type to add a member.'),
			'has_title' => TRUE,
			'title_label' => t('Member'),
			'help' => t('Enter the member firstname, lastname, email, phone number, member details, and select membership location'),
		),
			'table_reference_address' => array(
			'name' => t('Table Address'),
			'base' => 'table_reference_address',
			'description' => t('Use this content type to table address.'),
			'has_title' => TRUE,
			'title_label' => t('Address Title'),
			'help' => t('Enter the libary street, city, zipcode, and state'),
		),
	);
}


/**
* Implements hook_permission().
*/
function table_reference_permission() {
	return array(
		'create table member' => array(
			'title' => t('Create a member'),
			'description' => t('Create a table member'),
		),
		'edit own table member' => array(
			'title' => t('Edit own table member'),
			'description' => t('Edit your own table member'),
		),
		'edit any table member' => array(
			'title' => t('Edit any table member'),
			'description' => t('Edit any table member'),
		),
		'delete own table member' => array(
			'title' => t('Delete own table member'),
			'description' => t('Delete own table member'),
		),
		'delete any table member' => array(
			'title' => t('Delete any table member'),
			'description' => t('Delete any table member'),
		),
		
		'create table address' => array(
			'title' => t('Create a table address'),
			'description' => t('Create a table address'),
		),
		'edit own table address' => array(
			'title' => t('Edit own table address'),
			'description' => t('Edit your own table address'),
		),
		'edit any table address' => array(
			'title' => t('Edit any table address'),
			'description' => t('Edit any table address'),
		),
		'delete own table address' => array(
			'title' => t('Delete own table address'),
			'description' => t('Delete own table address'),
		),
		'delete any table address' => array(
			'title' => t('Delete any table address'),
			'description' => t('Delete any table address'),
		),
	);
}

/**
* Implements hook_node_access().
*/
function table_reference_node_access($op, $node, $account) {
	$is_author = $account->uid == $node->uid;
	switch ($op) {
		case 'create':
			// Allow if user's role has 'create joke' permission.
			if ((user_access('create table member', $account))||(user_access('create table address', $account))) {
				return NODE_ACCESS_ALLOW;
			}
		case 'update':
			// Allow if user's role has 'edit own joke' permission and user is
			// the author; or if the user's role has 'edit any joke' permission.
			if (
						( user_access('edit own table member', $account) && $is_author ||
							user_access('edit any table member', $account) ) ||
						
						( user_access('edit own table address', $account) && $is_author ||
							user_access('edit any table address', $account))
				  ) {
				return NODE_ACCESS_ALLOW;
			}
		case 'delete':
			// Allow if user's role has 'delete own joke' permission and user is
			// the author; or if the user's role has 'delete any joke' permission.
			if (
						(user_access('delete own table member', $account) && $is_author ||
						 user_access('delete any table member', $account)) ||
						(user_access('delete own table address', $account) && $is_author ||
						 user_access('delete any table address', $account)) 
				 ){
				return NODE_ACCESS_ALLOW;
			}
	}
}


/**
* Implement hook_form() with the standard default form.
*/
function table_reference_form($node, $form_state) {
	return node_content_form($node, $form_state);
}


/**
* Implements hook_insert().
*/
function table_reference_insert($node) {

	
	if (isset( $node->type )){
	$nodetype = $node->type;

	 
	 switch ($nodetype) {
	 	
	    case 'table_reference_member':

					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_member['und'][0]['value'].
					' was added by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
		
		  break; 
		  
	    case 'table_reference_address': 
					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_address['und'][0]['value'].
					' was added by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
	      break;
		  
	    default:
	      break;
	  }

	}
	
	
}

/**
* Implements hook_update().
*/
function table_reference_update($node) {
	
	
	if (isset( $node->type )){
	$nodetype = $node->type;

	 
	 switch ($nodetype) {
	 	
	    case 'table_reference_member':

					// log details of the job posting to watchdog
					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_member['und'][0]['value'].
					' was updated by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
		
		  break; 
		  
	    case 'table_reference_address': 
					// log details of the job posting to watchdog
					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_address['und'][0]['value'].
					' was updated by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
	      break;
		  
	    default:
	      break;
	  }

	}
	
	
	
	
}


/**
* Implements hook_delete().
*/
function table_reference_delete($node) {
	
	
		if (isset( $node->type )){
	$nodetype = $node->type;

	 
	 switch ($nodetype) {
	 	
	    case 'table_reference_member':

					// log details of the job posting to watchdog
					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_member['und'][0]['value'].
					' was deleted by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
		
		  break; 
		  
	    case 'table_reference_address': 
					// log details of the job posting to watchdog
					watchdog('libary member', 'A new member: '.$node->title.' for libray: '.
					$node->table_reference_address['und'][0]['value'].
					' was deleted by UID: '.$node->uid, $variables = array(),
					WATCHDOG_NOTICE, $link = 'node/'.$node->nid);
	      break;
		  
	    default:
	      break;
	  }

	}
}



